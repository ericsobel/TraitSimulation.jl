{
    "docs": [
        {
            "location": "/", 
            "text": "TraitSimulation.jl (prototype)\n\n\nA Julia module to perform trait simulation.\n\n\n\n\nInstallation\n\n\nTo install TraitSimulation please type the following code in a Julia REPL:\n\n\nPkg.clone(\nhttps://github.com/huwenboshi/TraitSimulation.jl.git\n)\n\n\n\n\n\n\n\nKey Features\n\n\n\n\nSimulate trait under GLM and GLMM\n\n\nProvide convenient ways to specify the simulation model\n\n\n\n\n\n\nContact\n\n\nHuwenbo Shi\n (shihuwenbo [at] ucla [dot] edu)", 
            "title": "Introduction"
        }, 
        {
            "location": "/#traitsimulationjl-prototype", 
            "text": "A Julia module to perform trait simulation.", 
            "title": "TraitSimulation.jl (prototype)"
        }, 
        {
            "location": "/#installation", 
            "text": "To install TraitSimulation please type the following code in a Julia REPL:  Pkg.clone( https://github.com/huwenboshi/TraitSimulation.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#key-features", 
            "text": "Simulate trait under GLM and GLMM  Provide convenient ways to specify the simulation model", 
            "title": "Key Features"
        }, 
        {
            "location": "/#contact", 
            "text": "Huwenbo Shi  (shihuwenbo [at] ucla [dot] edu)", 
            "title": "Contact"
        }, 
        {
            "location": "/example/example/", 
            "text": "Getting Started\n\n\nThis section provides some examples on how to use the TraitSimulation module.\n\n\n\n\nRandom test data set\n\n\nThe following code snippet creates a data frame containing genotype (X1, \n, X5) and phenotype (HDL and LDL) measurements for 10 individuals.\n\n\nusing\n \nDataFrames\n,\n \nDistributions\n,\n \nTraitSimulation\n\n\nnpeople\n,\n \nnsnp\n \n=\n \n(\n10\n,\n \n5\n)\n\n\nsnp_data\n \n=\n \nMatrix\n{\nFloat64\n}(\nnpeople\n,\n \nnsnp\n)\n\n\nfreqs\n \n=\n \n[\n0.2\n,\n \n0.3\n,\n \n0.4\n,\n \n0.7\n,\n \n0.5\n]\n\n\nfor\n \ni\n=\n1\n:\nnsnp\n\n    \nsnp_data\n[:,\ni\n]\n \n=\n \nrand\n(\nBinomial\n(\n2\n,\nfreqs\n[\ni\n]),\n \nnpeople\n)\n\n\nend\n\n\nhdl_data\n,\n \nldl_data\n \n=\n \n(\nVector\n{\nFloat64\n}(\nnpeople\n),\n \nVector\n{\nFloat64\n}(\nnpeople\n))\n\n\nfor\n \ni\n=\n1\n:\nnpeople\n\n    \nhdl_data\n[\ni\n]\n \n=\n \nrand\n(\nUniform\n(\n20\n,\n80\n))\n\n    \nldl_data\n[\ni\n]\n \n=\n \nrand\n(\nUniform\n(\n20\n,\n80\n))\n\n\nend\n\n\ndata\n \n=\n \n[\nsnp_data\n \nhdl_data\n \nldl_data\n]\n\n\ndata_frame\n \n=\n \nconvert\n(\nDataFrame\n,\n \ndata\n)\n\n\nnames!\n(\ndata_frame\n,\n \n[:\nX1\n,\n \n:\nX2\n,\n \n:\nX3\n,\n \n:\nX4\n,\n \n:\nX5\n,\n \n:\nHDL\n,\n \n:\nLDL\n])\n\n\n\n\n\n\n\n\nSimulate normal response\n\n\nThe following code snippet simulates a trait ($Y$) with normal response ($\\sigma = 1.0$) using the data frame created in \nthe first step\n.\n\n\n\n\n\n\\mu = -0.2X_1 + 0.1X_2 \\times X_5 + 0.3\\log(\\text{HDL} + \\text{LDL})\n\n\n\n\n\n\n\n\nY \\sim N(\\mu, 1.0)\n\n\n\n\n\nmodel\n \n=\n \nModel\n(\nY\n \n~\n \n-\n0.2\nX1\n+\n0.1\nX2\n*\nX5\n+\n0.3\nlog\n(\nHDL\n+\nLDL\n),\n \nIdentityLink\n(),\n \nNormalResponse\n(\n1.0\n))\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)\n\n\n\n\n\n\n\n\nSimulate multiple traits\n\n\nThe following code snippet simulates three traits ($Y_1, Y_2, Y_3$) with normal response ($\\sigma = 1.0$) but different mean parameter, using the data frame created in \nthe first step\n.\n\n\nmodel\n \n=\n \nModel\n([\nY1\n \n~\n \n0.2\nX1\n+\n3.0\n,\n \nY2\n \n~\n \n0.1\nX3\n+\n2.0\n,\n \nY3\n \n~\n \n0.3\nX4\n+\nHDL\n],\n \nIdentityLink\n(),\n \nNormalResponse\n(\n1.0\n))\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)\n\n\n\n\n\n\nThe following code snippet simulates three traits ($Y_1, Y_2, Y_3$) with different response distributions, using the data frame created in \nthe first step\n.\n\n\n\n\n\n\\mu_1 = 0.2X_1 + 3.0, Y_1 \\sim \\text{Bin}(100, \\mu_1)\n\n\n\n\n\n\n\n\n\\mu_2 = 0.1X_3 + 2.0, Y_2 \\sim \\text{Pois}(\\mu_2)\n\n\n\n\n\n\n\n\n\\mu_3 = 0.3X_4 + HDL, Y_3 \\sim N(\\mu_3, 2.0)\n\n\n\n\n\n\u03bc\n \n=\n \n[\nY1\n \n~\n \n0.2\nX1\n+\n3.0\n,\n \nY2\n \n~\n \n0.1\nX3\n+\n2.0\n,\n \nY3\n \n~\n \n0.3\nX4\n+\nHDL\n]\n\n\nlink\n \n=\n \n[\nLogitLink\n(),\n \nLogLink\n(),\n \nIdentityLink\n()]\n\n\ndist\n \n=\n \n[\nBinomialResponse\n(\n100\n),\n \nPoissonResponse\n(),\n \nNormalResponse\n(\n2.0\n)]\n\n\nmodel\n \n=\n \nModel\n(\n\u03bc\n,\n \nlink\n,\n \ndist\n)\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)\n\n\n\n\n\n\n\n\nSimulate random effects\n\n\nThe following code snippet simulates a trait with Poisson response with two variance components, using the data frame created in \nthe first step\n.\n\n\n\n\n\n\\mu = (0.2X_1 + 2.0) + X u + \\epsilon, u \\sim N(0, 0.04K), \\epsilon \\sim N(0, 0.8I), Y \\sim \\text{Pois}(\\mu)\n\n\n\n\n\n# a fake GRM\n\n\nK\n \n=\n \ncor\n(\ndata\n)\n\n\nI\n \n=\n \neye\n(\nnpeople\n)\n\n\n\u03a3\n \n=\n \n[\nVarianceComponent\n(\n0.2\n,\n \nK\n),\n \nVarianceComponent\n(\n0.8\n,\n \nI\n)]\n\n\n\u03bc\n \n=\n \nY\n \n~\n \n0.2\nX1\n+\n2.0\n\n\nmodel\n \n=\n \nModel\n(\n\u03bc\n,\n \n\u03a3\n,\n \nLogLink\n(),\n \nPoissonResponse\n())\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)\n\n\n\n\n\n\nWe also provide the \n@vc\n macro to simplify the specification of the covariances. Note, the variables K and I must be defined before calling the \n@vc\n macro.\n\n\n\u03a3\n \n=\n \n@\nvc\n \n0.2\nK\n \n+\n \n0.8\nI\n\n\nmodel\n \n=\n \nModel\n(\n\u03bc\n,\n \n\u03a3\n,\n \nLogLink\n(),\n \nPoissonResponse\n())\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)\n\n\n\n\n\n\nThe following code snippet simulates two traits where the random effects have cross covariances.\n\n\n# a fake GRM\n\n\nK\n \n=\n \ncor\n(\ndata\n)\n\n\nI\n \n=\n \neye\n(\nnpeople\n)\n\n\nA\n \n=\n \n[\n0.2\n \n-\n0.1\n;\n \n-\n0.1\n \n0.3\n]\n\n\nB\n \n=\n \n[\n0.8\n \n-\n0.2\n;\n \n-\n0.2\n \n0.7\n]\n\n\n\u03bc\n \n=\n \n[\nY1\n \n~\n \nX1\n+\n0.2\nX2\n*\nX3\n+\n1.0\n,\n \nY2\n \n~\n \nX3\n+\n0.1\nlog\n(\nHDL\n+\nLDL\n)\n+\n0.1\n]\n\n\nmodel\n \n=\n \nModel\n(\n\u03bc\n,\n \n(@\nvc\n \nA\n \n\u2297\n \nK\n \n+\n \nB\n \n\u2297\n \nI\n),\n \nIdentityLink\n(),\n \nNormalResponse\n(\n1.0\n))\n\n\nsimulate\n(\nmodel\n,\n \ndata_frame\n)", 
            "title": "Getting Started"
        }, 
        {
            "location": "/example/example/#getting-started", 
            "text": "This section provides some examples on how to use the TraitSimulation module.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/example/example/#random-test-data-set", 
            "text": "The following code snippet creates a data frame containing genotype (X1,  , X5) and phenotype (HDL and LDL) measurements for 10 individuals.  using   DataFrames ,   Distributions ,   TraitSimulation  npeople ,   nsnp   =   ( 10 ,   5 )  snp_data   =   Matrix { Float64 }( npeople ,   nsnp )  freqs   =   [ 0.2 ,   0.3 ,   0.4 ,   0.7 ,   0.5 ]  for   i = 1 : nsnp \n     snp_data [:, i ]   =   rand ( Binomial ( 2 , freqs [ i ]),   npeople )  end  hdl_data ,   ldl_data   =   ( Vector { Float64 }( npeople ),   Vector { Float64 }( npeople ))  for   i = 1 : npeople \n     hdl_data [ i ]   =   rand ( Uniform ( 20 , 80 )) \n     ldl_data [ i ]   =   rand ( Uniform ( 20 , 80 ))  end  data   =   [ snp_data   hdl_data   ldl_data ]  data_frame   =   convert ( DataFrame ,   data )  names! ( data_frame ,   [: X1 ,   : X2 ,   : X3 ,   : X4 ,   : X5 ,   : HDL ,   : LDL ])", 
            "title": "Random test data set"
        }, 
        {
            "location": "/example/example/#simulate-normal-response", 
            "text": "The following code snippet simulates a trait ($Y$) with normal response ($\\sigma = 1.0$) using the data frame created in  the first step .   \n\\mu = -0.2X_1 + 0.1X_2 \\times X_5 + 0.3\\log(\\text{HDL} + \\text{LDL})    \nY \\sim N(\\mu, 1.0)   model   =   Model ( Y   ~   - 0.2 X1 + 0.1 X2 * X5 + 0.3 log ( HDL + LDL ),   IdentityLink (),   NormalResponse ( 1.0 ))  simulate ( model ,   data_frame )", 
            "title": "Simulate normal response"
        }, 
        {
            "location": "/example/example/#simulate-multiple-traits", 
            "text": "The following code snippet simulates three traits ($Y_1, Y_2, Y_3$) with normal response ($\\sigma = 1.0$) but different mean parameter, using the data frame created in  the first step .  model   =   Model ([ Y1   ~   0.2 X1 + 3.0 ,   Y2   ~   0.1 X3 + 2.0 ,   Y3   ~   0.3 X4 + HDL ],   IdentityLink (),   NormalResponse ( 1.0 ))  simulate ( model ,   data_frame )   The following code snippet simulates three traits ($Y_1, Y_2, Y_3$) with different response distributions, using the data frame created in  the first step .   \n\\mu_1 = 0.2X_1 + 3.0, Y_1 \\sim \\text{Bin}(100, \\mu_1)    \n\\mu_2 = 0.1X_3 + 2.0, Y_2 \\sim \\text{Pois}(\\mu_2)    \n\\mu_3 = 0.3X_4 + HDL, Y_3 \\sim N(\\mu_3, 2.0)   \u03bc   =   [ Y1   ~   0.2 X1 + 3.0 ,   Y2   ~   0.1 X3 + 2.0 ,   Y3   ~   0.3 X4 + HDL ]  link   =   [ LogitLink (),   LogLink (),   IdentityLink ()]  dist   =   [ BinomialResponse ( 100 ),   PoissonResponse (),   NormalResponse ( 2.0 )]  model   =   Model ( \u03bc ,   link ,   dist )  simulate ( model ,   data_frame )", 
            "title": "Simulate multiple traits"
        }, 
        {
            "location": "/example/example/#simulate-random-effects", 
            "text": "The following code snippet simulates a trait with Poisson response with two variance components, using the data frame created in  the first step .   \n\\mu = (0.2X_1 + 2.0) + X u + \\epsilon, u \\sim N(0, 0.04K), \\epsilon \\sim N(0, 0.8I), Y \\sim \\text{Pois}(\\mu)   # a fake GRM  K   =   cor ( data )  I   =   eye ( npeople )  \u03a3   =   [ VarianceComponent ( 0.2 ,   K ),   VarianceComponent ( 0.8 ,   I )]  \u03bc   =   Y   ~   0.2 X1 + 2.0  model   =   Model ( \u03bc ,   \u03a3 ,   LogLink (),   PoissonResponse ())  simulate ( model ,   data_frame )   We also provide the  @vc  macro to simplify the specification of the covariances. Note, the variables K and I must be defined before calling the  @vc  macro.  \u03a3   =   @ vc   0.2 K   +   0.8 I  model   =   Model ( \u03bc ,   \u03a3 ,   LogLink (),   PoissonResponse ())  simulate ( model ,   data_frame )   The following code snippet simulates two traits where the random effects have cross covariances.  # a fake GRM  K   =   cor ( data )  I   =   eye ( npeople )  A   =   [ 0.2   - 0.1 ;   - 0.1   0.3 ]  B   =   [ 0.8   - 0.2 ;   - 0.2   0.7 ]  \u03bc   =   [ Y1   ~   X1 + 0.2 X2 * X3 + 1.0 ,   Y2   ~   X3 + 0.1 log ( HDL + LDL ) + 0.1 ]  model   =   Model ( \u03bc ,   (@ vc   A   \u2297   K   +   B   \u2297   I ),   IdentityLink (),   NormalResponse ( 1.0 ))  simulate ( model ,   data_frame )", 
            "title": "Simulate random effects"
        }, 
        {
            "location": "/types/types/", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/sim/sim/", 
            "text": "", 
            "title": "Generate Simulations"
        }
    ]
}